openapi: 3.0.0
info:
  title: Home Library Service
  description: Home music library service
  version: 1.0.0

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        login:
          type: string
        version:
          type: number
        createdAt:
          type: number
        updatedAt:
          type: number
        password:
          type: string
      required:
        - id
        - login
        - version
        - createdAt
        - updatedAt
        - password
    CreateUserDto:
      type: object
      properties:
        login:
          type: string
        password:
          type: string
      required:
        - login
        - password
    UpdatePasswordDto:
      type: object
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
      required:
        - oldPassword
        - newPassword
    Artist:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        grammy:
          type: boolean
      required:
        - id
        - name
        - grammy
    CreateArtistDto:
      type: object
      properties:
        name:
          type: string
        grammy:
          type: boolean
      required:
        - name
        - grammy
    UpdateArtistDto:
      type: object
      properties:
        name:
          type: string
        grammy:
          type: boolean
      required:
        - name
        - grammy
    Album:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        year:
          type: number
        artistId:
          type: string
          nullable: true
      required:
        - id
        - name
        - year
        - artistId
    CreateAlbumDto:
      type: object
      properties:
        name:
          type: string
        year:
          type: number
          minimum: 1
        artistId:
          type: string
          nullable: true
      required:
        - name
        - year
        - artistId
    UpdateAlbumDto:
      type: object
      properties:
        name:
          type: string
        year:
          type: number
          minimum: 1
        artistId:
          type: string
          nullable: true
      required:
        - name
        - year
        - artistId
    Track:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        artistId:
          type: string
          nullable: true
        albumId:
          type: string
          nullable: true
        duration:
          type: number
      required:
        - id
        - name
        - artistId
        - albumId
        - duration
    CreateTrackDto:
      type: object
      properties:
        name:
          type: string
        artistId:
          type: string
          nullable: true
        albumId:
          type: string
          nullable: true
        duration:
          type: number
          minimum: 1
      required:
        - name
        - artistId
        - albumId
        - duration
    UpdateTrackDto:
      type: object
      properties:
        name:
          type: string
        artistId:
          type: string
          nullable: true
        albumId:
          type: string
          nullable: true
        duration:
          type: number
          minimum: 1
      required:
        - name
        - artistId
        - albumId
        - duration

paths:
  /:
    get:
      operationId: AppController_getHello
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: string
  /user/{id}:
    get:
      operationId: UserController_findOne
      summary: Get single user by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Validation errors.
        '404':
          description: User not found.
      tags:
        - User
    put:
      operationId: UserController_updatePassword
      summary: Update user
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Validation errors.
        '403':
          description: Forbidden.
        '404':
          description: User not found.
      tags:
        - User
    delete:
      operationId: UserController_delete
      summary: Delete user
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: User deleted.
        '400':
          description: Validation errors.
        '404':
          description: User not found.
      tags:
        - User
  /user:
    get:
      operationId: UserController_findAll
      summary: Get list of users
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      tags:
        - User
    post:
      operationId: UserController_create
      summary: Create user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Validation errors.
      tags:
        - User
  /artist/{id}:
    get:
      operationId: ArtistController_findOne
      summary: Get single artist by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: Validation errors.
        '404':
          description: Artist not found.
      tags:
        - Artist
    put:
      operationId: ArtistController_update
      summary: Update artist
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateArtistDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: Validation errors.
        '404':
          description: Artist not found.
      tags:
        - Artist
    delete:
      operationId: ArtistController_delete
      summary: Delete artist
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Artist deleted.
        '400':
          description: Validation errors.
        '404':
          description: Artist not found.
      tags:
        - Artist
  /artist:
    get:
      operationId: ArtistController_findAll
      summary: Get list of artists
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'
      tags:
        - Artist
    post:
      operationId: ArtistController_create
      summary: Create artist
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArtistDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: Validation errors.
      tags:
        - Artist
  /album/{id}:
    get:
      operationId: AlbumController_findOne
      summary: Get single album by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: Validation errors.
        '404':
          description: Album not found.
      tags:
        - Album
    put:
      operationId: AlbumController_update
      summary: Update album
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAlbumDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: Validation errors.
        '404':
          description: Album not found.
      tags:
        - Album
    delete:
      operationId: AlbumController_delete
      summary: Delete album
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Album deleted.
        '400':
          description: Validation errors.
        '404':
          description: Album not found.
      tags:
        - Album
  /album:
    get:
      operationId: AlbumController_findAll
      summary: Get list of albums
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'
      tags:
        - Album
    post:
      operationId: AlbumController_create
      summary: Create album
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlbumDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: Validation errors.
      tags:
        - Album
  /track/{id}:
    get:
      operationId: TrackController_findOne
      summary: Get single track by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '400':
          description: Validation errors.
        '404':
          description: Track not found.
      tags:
        - Track
    put:
      operationId: TrackController_update
      summary: Update track
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTrackDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '400':
          description: Validation errors.
        '404':
          description: Track not found.
      tags:
        - Track
    delete:
      operationId: TrackController_delete
      summary: Delete track
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Track deleted.
        '400':
          description: Validation errors.
        '404':
          description: Track not found.
      tags:
        - Track
  /track:
    get:
      operationId: TrackController_findAll
      summary: Get list of tracks
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'
      tags:
        - Track
    post:
      operationId: TrackController_create
      summary: Create track
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrackDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '400':
          description: Validation errors.
      tags:
        - Track
  /favs:
    get:
      operationId: FavoritesController_findAll
      summary: Get list of favorites
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
      tags:
        - Favorites
  /favs/track/{id}:
    post:
      operationId: FavoritesController_addTrack
      summary: Add track to favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: Track added to favorites.
        '400':
          description: Validation errors.
        '422':
          description: Track not found.
      tags:
        - Favorites
    delete:
      operationId: FavoritesController_deleteTrack
      summary: Remove track from favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Track deleted from favorites.
        '400':
          description: Validation errors.
        '404':
          description: Track is not in favorites.
      tags:
        - Favorites
  /favs/album/{id}:
    post:
      operationId: FavoritesController_addAlbum
      summary: Add album to favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: Album added to favorites.
        '400':
          description: Validation errors.
        '422':
          description: Album not found.
      tags:
        - Favorites
    delete:
      operationId: FavoritesController_deleteAlbum
      summary: Remove album from favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Album deleted from favorites.
        '400':
          description: Validation errors.
        '404':
          description: Album is not in favorites.
      tags:
        - Favorites
  /favs/artist/{id}:
    post:
      operationId: FavoritesController_addArtist
      summary: Add artist to favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: Artist added to favorites.
        '400':
          description: Validation errors.
        '422':
          description: Artist not found.
      tags:
        - Favorites
    delete:
      operationId: FavoritesController_deleteArtist
      summary: Remove artist from favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Artist deleted from favorites.
        '400':
          description: Validation errors.
        '404':
          description: Artist is not in favorites.
      tags:
        - Favorites